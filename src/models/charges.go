// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Charge is an object representing the database table.
type Charge struct {
	ID          null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Amount      int64      `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	CategoryID  null.Int64 `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	Description string     `boil:"description" json:"description" toml:"description" yaml:"description"`

	R *chargeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chargeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChargeColumns = struct {
	ID          string
	Amount      string
	CategoryID  string
	Description string
}{
	ID:          "id",
	Amount:      "amount",
	CategoryID:  "category_id",
	Description: "description",
}

var ChargeTableColumns = struct {
	ID          string
	Amount      string
	CategoryID  string
	Description string
}{
	ID:          "charges.id",
	Amount:      "charges.amount",
	CategoryID:  "charges.category_id",
	Description: "charges.description",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ChargeWhere = struct {
	ID          whereHelpernull_Int64
	Amount      whereHelperint64
	CategoryID  whereHelpernull_Int64
	Description whereHelperstring
}{
	ID:          whereHelpernull_Int64{field: "\"charges\".\"id\""},
	Amount:      whereHelperint64{field: "\"charges\".\"amount\""},
	CategoryID:  whereHelpernull_Int64{field: "\"charges\".\"category_id\""},
	Description: whereHelperstring{field: "\"charges\".\"description\""},
}

// ChargeRels is where relationship names are stored.
var ChargeRels = struct {
	Category string
}{
	Category: "Category",
}

// chargeR is where relationships are stored.
type chargeR struct {
	Category *Category `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
}

// NewStruct creates a new relationship struct
func (*chargeR) NewStruct() *chargeR {
	return &chargeR{}
}

func (r *chargeR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

// chargeL is where Load methods for each relationship are stored.
type chargeL struct{}

var (
	chargeAllColumns            = []string{"id", "amount", "category_id", "description"}
	chargeColumnsWithoutDefault = []string{}
	chargeColumnsWithDefault    = []string{"id", "amount", "category_id", "description"}
	chargePrimaryKeyColumns     = []string{"id"}
	chargeGeneratedColumns      = []string{"id"}
)

type (
	// ChargeSlice is an alias for a slice of pointers to Charge.
	// This should almost always be used instead of []Charge.
	ChargeSlice []*Charge
	// ChargeHook is the signature for custom Charge hook methods
	ChargeHook func(context.Context, boil.ContextExecutor, *Charge) error

	chargeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chargeType                 = reflect.TypeOf(&Charge{})
	chargeMapping              = queries.MakeStructMapping(chargeType)
	chargePrimaryKeyMapping, _ = queries.BindMapping(chargeType, chargeMapping, chargePrimaryKeyColumns)
	chargeInsertCacheMut       sync.RWMutex
	chargeInsertCache          = make(map[string]insertCache)
	chargeUpdateCacheMut       sync.RWMutex
	chargeUpdateCache          = make(map[string]updateCache)
	chargeUpsertCacheMut       sync.RWMutex
	chargeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chargeAfterSelectMu sync.Mutex
var chargeAfterSelectHooks []ChargeHook

var chargeBeforeInsertMu sync.Mutex
var chargeBeforeInsertHooks []ChargeHook
var chargeAfterInsertMu sync.Mutex
var chargeAfterInsertHooks []ChargeHook

var chargeBeforeUpdateMu sync.Mutex
var chargeBeforeUpdateHooks []ChargeHook
var chargeAfterUpdateMu sync.Mutex
var chargeAfterUpdateHooks []ChargeHook

var chargeBeforeDeleteMu sync.Mutex
var chargeBeforeDeleteHooks []ChargeHook
var chargeAfterDeleteMu sync.Mutex
var chargeAfterDeleteHooks []ChargeHook

var chargeBeforeUpsertMu sync.Mutex
var chargeBeforeUpsertHooks []ChargeHook
var chargeAfterUpsertMu sync.Mutex
var chargeAfterUpsertHooks []ChargeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Charge) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Charge) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Charge) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Charge) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Charge) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Charge) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Charge) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Charge) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Charge) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chargeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChargeHook registers your hook function for all future operations.
func AddChargeHook(hookPoint boil.HookPoint, chargeHook ChargeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chargeAfterSelectMu.Lock()
		chargeAfterSelectHooks = append(chargeAfterSelectHooks, chargeHook)
		chargeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		chargeBeforeInsertMu.Lock()
		chargeBeforeInsertHooks = append(chargeBeforeInsertHooks, chargeHook)
		chargeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		chargeAfterInsertMu.Lock()
		chargeAfterInsertHooks = append(chargeAfterInsertHooks, chargeHook)
		chargeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		chargeBeforeUpdateMu.Lock()
		chargeBeforeUpdateHooks = append(chargeBeforeUpdateHooks, chargeHook)
		chargeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		chargeAfterUpdateMu.Lock()
		chargeAfterUpdateHooks = append(chargeAfterUpdateHooks, chargeHook)
		chargeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		chargeBeforeDeleteMu.Lock()
		chargeBeforeDeleteHooks = append(chargeBeforeDeleteHooks, chargeHook)
		chargeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		chargeAfterDeleteMu.Lock()
		chargeAfterDeleteHooks = append(chargeAfterDeleteHooks, chargeHook)
		chargeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		chargeBeforeUpsertMu.Lock()
		chargeBeforeUpsertHooks = append(chargeBeforeUpsertHooks, chargeHook)
		chargeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		chargeAfterUpsertMu.Lock()
		chargeAfterUpsertHooks = append(chargeAfterUpsertHooks, chargeHook)
		chargeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single charge record from the query using the global executor.
func (q chargeQuery) OneG(ctx context.Context) (*Charge, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single charge record from the query.
func (q chargeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Charge, error) {
	o := &Charge{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for charges")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Charge records from the query using the global executor.
func (q chargeQuery) AllG(ctx context.Context) (ChargeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Charge records from the query.
func (q chargeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChargeSlice, error) {
	var o []*Charge

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Charge slice")
	}

	if len(chargeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Charge records in the query using the global executor
func (q chargeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Charge records in the query.
func (q chargeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count charges rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q chargeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q chargeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if charges exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Charge) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chargeL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCharge interface{}, mods queries.Applicator) error {
	var slice []*Charge
	var object *Charge

	if singular {
		var ok bool
		object, ok = maybeCharge.(*Charge)
		if !ok {
			object = new(Charge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCharge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCharge))
			}
		}
	} else {
		s, ok := maybeCharge.(*[]*Charge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCharge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCharge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chargeR{}
		}
		if !queries.IsNil(object.CategoryID) {
			args[object.CategoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chargeR{}
			}

			if !queries.IsNil(obj.CategoryID) {
				args[obj.CategoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.Charges = append(foreign.R.Charges, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CategoryID, foreign.ID) {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.Charges = append(foreign.R.Charges, local)
				break
			}
		}
	}

	return nil
}

// SetCategoryG of the charge to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Charges.
// Uses the global database handle.
func (o *Charge) SetCategoryG(ctx context.Context, insert bool, related *Category) error {
	return o.SetCategory(ctx, boil.GetContextDB(), insert, related)
}

// SetCategory of the charge to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Charges.
func (o *Charge) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"charges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 0, chargePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CategoryID, related.ID)
	if o.R == nil {
		o.R = &chargeR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			Charges: ChargeSlice{o},
		}
	} else {
		related.R.Charges = append(related.R.Charges, o)
	}

	return nil
}

// RemoveCategoryG relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Charge) RemoveCategoryG(ctx context.Context, related *Category) error {
	return o.RemoveCategory(ctx, boil.GetContextDB(), related)
}

// RemoveCategory relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Charge) RemoveCategory(ctx context.Context, exec boil.ContextExecutor, related *Category) error {
	var err error

	queries.SetScanner(&o.CategoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("category_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Category = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Charges {
		if queries.Equal(o.CategoryID, ri.CategoryID) {
			continue
		}

		ln := len(related.R.Charges)
		if ln > 1 && i < ln-1 {
			related.R.Charges[i] = related.R.Charges[ln-1]
		}
		related.R.Charges = related.R.Charges[:ln-1]
		break
	}
	return nil
}

// Charges retrieves all the records using an executor.
func Charges(mods ...qm.QueryMod) chargeQuery {
	mods = append(mods, qm.From("\"charges\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"charges\".*"})
	}

	return chargeQuery{q}
}

// FindChargeG retrieves a single record by ID.
func FindChargeG(ctx context.Context, iD null.Int64, selectCols ...string) (*Charge, error) {
	return FindCharge(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCharge retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCharge(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Charge, error) {
	chargeObj := &Charge{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"charges\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chargeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from charges")
	}

	if err = chargeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chargeObj, err
	}

	return chargeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Charge) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Charge) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no charges provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chargeInsertCacheMut.RLock()
	cache, cached := chargeInsertCache[key]
	chargeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chargeAllColumns,
			chargeColumnsWithDefault,
			chargeColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, chargeGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(chargeType, chargeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chargeType, chargeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"charges\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"charges\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into charges")
	}

	if !cached {
		chargeInsertCacheMut.Lock()
		chargeInsertCache[key] = cache
		chargeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Charge record using the global executor.
// See Update for more documentation.
func (o *Charge) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Charge.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Charge) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chargeUpdateCacheMut.RLock()
	cache, cached := chargeUpdateCache[key]
	chargeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chargeAllColumns,
			chargePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, chargeGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update charges, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"charges\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, chargePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chargeType, chargeMapping, append(wl, chargePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update charges row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for charges")
	}

	if !cached {
		chargeUpdateCacheMut.Lock()
		chargeUpdateCache[key] = cache
		chargeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q chargeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q chargeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for charges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for charges")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ChargeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChargeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"charges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chargePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in charge slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all charge")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Charge) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Charge) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no charges provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chargeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chargeUpsertCacheMut.RLock()
	cache, cached := chargeUpsertCache[key]
	chargeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			chargeAllColumns,
			chargeColumnsWithDefault,
			chargeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chargeAllColumns,
			chargePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert charges, could not build update column list")
		}

		ret := strmangle.SetComplement(chargeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chargePrimaryKeyColumns))
			copy(conflict, chargePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"charges\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chargeType, chargeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chargeType, chargeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert charges")
	}

	if !cached {
		chargeUpsertCacheMut.Lock()
		chargeUpsertCache[key] = cache
		chargeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Charge record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Charge) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Charge record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Charge) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Charge provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chargePrimaryKeyMapping)
	sql := "DELETE FROM \"charges\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from charges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for charges")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q chargeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q chargeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chargeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from charges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for charges")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ChargeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChargeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chargeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"charges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chargePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from charge slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for charges")
	}

	if len(chargeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Charge) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Charge provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Charge) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCharge(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ChargeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChargeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChargeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chargePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"charges\".* FROM \"charges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chargePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChargeSlice")
	}

	*o = slice

	return nil
}

// ChargeExistsG checks if the Charge row exists.
func ChargeExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return ChargeExists(ctx, boil.GetContextDB(), iD)
}

// ChargeExists checks if the Charge row exists.
func ChargeExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"charges\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if charges exists")
	}

	return exists, nil
}

// Exists checks if the Charge row exists.
func (o *Charge) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChargeExists(ctx, exec, o.ID)
}
