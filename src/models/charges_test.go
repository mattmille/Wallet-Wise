// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCharges(t *testing.T) {
	t.Parallel()

	query := Charges()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChargesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChargesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Charges().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChargesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChargeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChargesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChargeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Charge exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChargeExists to return true, but got false.")
	}
}

func testChargesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	chargeFound, err := FindCharge(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if chargeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChargesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Charges().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChargesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Charges().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChargesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chargeOne := &Charge{}
	chargeTwo := &Charge{}
	if err = randomize.Struct(seed, chargeOne, chargeDBTypes, false, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}
	if err = randomize.Struct(seed, chargeTwo, chargeDBTypes, false, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chargeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chargeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Charges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChargesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chargeOne := &Charge{}
	chargeTwo := &Charge{}
	if err = randomize.Struct(seed, chargeOne, chargeDBTypes, false, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}
	if err = randomize.Struct(seed, chargeTwo, chargeDBTypes, false, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chargeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chargeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func chargeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Charge) error {
	*o = Charge{}
	return nil
}

func chargeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Charge) error {
	*o = Charge{}
	return nil
}

func chargeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Charge) error {
	*o = Charge{}
	return nil
}

func chargeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Charge) error {
	*o = Charge{}
	return nil
}

func chargeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Charge) error {
	*o = Charge{}
	return nil
}

func chargeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Charge) error {
	*o = Charge{}
	return nil
}

func chargeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Charge) error {
	*o = Charge{}
	return nil
}

func chargeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Charge) error {
	*o = Charge{}
	return nil
}

func chargeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Charge) error {
	*o = Charge{}
	return nil
}

func testChargesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Charge{}
	o := &Charge{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, chargeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Charge object: %s", err)
	}

	AddChargeHook(boil.BeforeInsertHook, chargeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	chargeBeforeInsertHooks = []ChargeHook{}

	AddChargeHook(boil.AfterInsertHook, chargeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	chargeAfterInsertHooks = []ChargeHook{}

	AddChargeHook(boil.AfterSelectHook, chargeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	chargeAfterSelectHooks = []ChargeHook{}

	AddChargeHook(boil.BeforeUpdateHook, chargeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	chargeBeforeUpdateHooks = []ChargeHook{}

	AddChargeHook(boil.AfterUpdateHook, chargeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	chargeAfterUpdateHooks = []ChargeHook{}

	AddChargeHook(boil.BeforeDeleteHook, chargeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	chargeBeforeDeleteHooks = []ChargeHook{}

	AddChargeHook(boil.AfterDeleteHook, chargeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	chargeAfterDeleteHooks = []ChargeHook{}

	AddChargeHook(boil.BeforeUpsertHook, chargeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	chargeBeforeUpsertHooks = []ChargeHook{}

	AddChargeHook(boil.AfterUpsertHook, chargeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	chargeAfterUpsertHooks = []ChargeHook{}
}

func testChargesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChargesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(chargeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChargeToOneCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Charge
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CategoryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCategoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Category) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ChargeSlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*Charge)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testChargeToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Charge
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chargeDBTypes, false, strmangle.SetComplement(chargePrimaryKeyColumns, chargeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Charges[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID, x.ID)
		}
	}
}

func testChargeToOneRemoveOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Charge
	var b Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chargeDBTypes, false, strmangle.SetComplement(chargePrimaryKeyColumns, chargeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCategory(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCategory(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Category().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Category != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CategoryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Charges) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testChargesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChargesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChargeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChargesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Charges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chargeDBTypes = map[string]string{`ID`: `INTEGER`, `Amount`: `INTEGER`, `CategoryID`: `INTEGER`, `Description`: `TEXT`}
	_             = bytes.MinRead
)

func testChargesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(chargePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(chargeAllColumns) == len(chargePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChargesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chargeAllColumns) == len(chargePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Charge{}
	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chargeDBTypes, true, chargePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chargeAllColumns, chargePrimaryKeyColumns) {
		fields = chargeAllColumns
	} else {
		fields = strmangle.SetComplement(
			chargeAllColumns,
			chargePrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, chargeGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChargeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChargesUpsert(t *testing.T) {
	t.Parallel()
	if len(chargeAllColumns) == len(chargePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Charge{}
	if err = randomize.Struct(seed, &o, chargeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Charge: %s", err)
	}

	count, err := Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, chargeDBTypes, false, chargePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Charge struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Charge: %s", err)
	}

	count, err = Charges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
